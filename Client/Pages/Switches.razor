@page "/machine/switches"
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Switches | NetProcGame Manager</PageTitle>

<MudExpansionPanels>
    <MudExpansionPanel Text="Switch Guide" Dense=true
                       @bind-IsExpanded=_isHelpExanded
                       Icon="@Icons.Material.Filled.Help">
        <MudStack>
            <MudText Typo="Typo.caption" Color="Color.Warning">
                Tags | trough: tag trough switches with `trough` and last eject switch with `troughEject`
            </MudText>

            <MudText Typo="Typo.caption" Color="Color.Warning">
                Tags | door: handles door switches for service modes etc
            </MudText>

            <MudText Typo="Typo.caption" Color="Color.Warning">
                Tags | early: early ball save switches
            </MudText>
        </MudStack>

        <MudDivider/>

        <MudStack Class="mt-2">
            <MudText Typo="Typo.caption" Color="Color.Warning">
                ItemTypes | flipper: set all flippers ItemType to flipper to create switch rules and map any flipper coils with the same name
            </MudText>

            <MudText Typo="Typo.caption" Color="Color.Warning">
                ItemTypes | bumper: set all Bumpers and Slingshots to create switch rules and map any coils with the same name as the switch
            </MudText>
        </MudStack>

        <MudDivider />

        <MudStack Class="mt-2">
            <MudText Typo="Typo.caption" Color="Color.Warning">
                SearchReset | open or closed will reset the ball search
            </MudText>

            <MudText Typo="Typo.caption" Color="Color.Warning">
                SearchStop | open or closed will stop the ball search
            </MudText>
        </MudStack>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudDataGrid T="SwitchConfigFileEntry" MultiSelection="false"
             Items="@Elements"
             SortMode="SortMode.Multiple"
             Dense=true
             FixedHeader=true
             Height="568px"
             Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true"
             Bordered=true
             ReadOnly=false
             EditTrigger="DataGridEditTrigger.OnRowClick"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Switches</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Number" Title="SwNum" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.ItemType" Filterable=false Resizable="true" Sortable="false" />
        <PropertyColumn Property="x => x.Tags" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.SearchReset" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.SearchStop" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.InputWire" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.GroundWire" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.XPos" SortBy="@_sortBy">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.XPos Variant="Variant.Outlined" Label="XPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.YPos" SortBy="@_sortBy">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.YPos Variant="Variant.Outlined" Label="YPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
        </PropertyColumn>
    </Columns>
    @*    <PagerContent>
    <MudDataGridPager T="SwitchConfigFileEntry" />
    </PagerContent>*@
</MudDataGrid>


@code {
    private IEnumerable<SwitchConfigFileEntry> Elements = new List<SwitchConfigFileEntry>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    bool _isHelpExanded = false;

    // custom sort by name length
    private Func<SwitchConfigFileEntry, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<SwitchConfigFileEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<List<SwitchConfigFileEntry>>("machineitems/switches");
    }

    // events
    void StartedEditingItem(SwitchConfigFileEntry item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(SwitchConfigFileEntry item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(SwitchConfigFileEntry item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        var response = await Http.PutAsJsonAsync("/machineitems/updateswitch", item);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("failed to update switch", Severity.Error);
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<bool>();
            if (result)
                Snackbar.Add("switch updated", Severity.Success);
            else
                Snackbar.Add("failed to update switch", Severity.Warning);
        }
    }
}