@page "/machine/leds"
@inject HttpClient Http

<PageTitle>Switches | NetProcGame Manager</PageTitle>

<MudDataGrid T="LedConfigFileEntry" MultiSelection="true"
             Items="@Elements" SortMode="SortMode.Multiple"
             Dense=true
             FixedHeader=true
             Height="768px"
             Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Database switches</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="LedConfigFileEntry" />
        <PropertyColumn Property="x => x.Number" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Polarity" SortBy="@_sortBy" />        
        <PropertyColumn Property="x => x.Bus" SortBy="@_sortBy" />        
        <PropertyColumn Property="x => x.Tags" SortBy="@_sortBy" />        
    </Columns>
    @*    <PagerContent>
    <MudDataGridPager T="LedConfigFileEntry" />
    </PagerContent>*@
</MudDataGrid>


@code {
    private IEnumerable<LedConfigFileEntry> Elements = new List<LedConfigFileEntry>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<LedConfigFileEntry, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<LedConfigFileEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<List<LedConfigFileEntry>>("machineitems/leds");
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<LedConfigFileEntry> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<LedConfigFileEntry> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}