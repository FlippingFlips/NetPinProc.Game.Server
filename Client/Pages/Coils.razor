@page "/machine/coils"
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Coils | NetProc.Data Manager</PageTitle>

@*RowClick="@RowClicked"*@
@**@
@*EditMode="DataGridEditMode.Cell"*@

<MudDataGrid T="CoilConfigFileEntry" MultiSelection="false"
             Items="@Elements"
             SortMode="SortMode.Multiple"
             Dense=true
             FixedHeader=true
             Height="768px"
             Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true"                          
             Bordered=true
             ReadOnly=false        
             EditTrigger="DataGridEditTrigger.OnRowClick"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Coils</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search Coil Name" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        @*<SelectColumn T="CoilConfigFileEntry" />*@
        <PropertyColumn Property="x => x.Number" Title="Addr" Sortable="true" Filterable="false" Resizable="false" StickyLeft="true" HeaderStyle="white-space:nowrap" />
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" StickyLeft="true" />
        <PropertyColumn Property="x => x.PulseTime" Filterable=false Resizable="true" Sortable="false" />
        <PropertyColumn Property="x => x.ItemType" Filterable=false Resizable="true" Sortable="false" />
        <PropertyColumn Property="x => x.Polarity" Filterable=false Resizable="true" Sortable="false" />
        <PropertyColumn Property="x => x.Tags" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Voltage" SortBy="@_sortBy" Filterable=false Resizable="true" Sortable="false" />
        <PropertyColumn Property="x => x.VoltageWire" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.ReturnWire" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Bus" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.XPos" SortBy="@_sortBy">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.XPos Variant="Variant.Outlined" Label="XPos" Min="0.00" Max="3600.00" T="double?"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.YPos" SortBy="@_sortBy">
            <EditTemplate>
                <MudNumericField @bind-Value=context.Item.YPos Variant ="Variant.Outlined" Label="YPos" Min="0.00" Max="3600.00" T="double?" />
            </EditTemplate>
        </PropertyColumn>
    </Columns>
    @*    <PagerContent>
    <MudDataGridPager T="SwitchConfigFileEntry" />
    </PagerContent>*@
</MudDataGrid>


<MudText Typo="Typo.caption" Color="Color.Warning">
    Hold coils should be set to pulse 0. Flippers are done automatically and will be overidden.
</MudText>

@code {
    private List<CoilConfigFileEntry> Elements = new List<CoilConfigFileEntry>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<CoilConfigFileEntry, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<CoilConfigFileEntry, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        if(Elements?.Count() == 0)
        {
            Elements = await Http.GetFromJsonAsync<List<CoilConfigFileEntry>>("machineitems/coils");
        }       
    }

    // events
    void StartedEditingItem(CoilConfigFileEntry item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CoilConfigFileEntry item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async Task CommittedItemChanges(CoilConfigFileEntry item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        var response = await Http.PutAsJsonAsync("/machineitems/updatecoil", item);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("failed to update coil", Severity.Error);
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<bool>();
            if(result)
                Snackbar.Add("coil updated", Severity.Success);
            else
                Snackbar.Add("failed to update coil", Severity.Warning);
        }
    }
}